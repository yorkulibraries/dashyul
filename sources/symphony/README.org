#+TITLE: Source: Symphony

#+STARTUP: showall entitiespretty inlineimages
#+OPTIONS: toc:nil ^:nil

* About



* Scripts

** ~process-weekly-user-dump.rb~

Every week Symphony generates a big file (e.g. ~/sirsilogs/barcode.sysid.profile.affil.out-20180210~) that looks like this:

#+BEGIN_EXAMPLE
29007005111111|859199999|LAW|LAW|
29007013222222|872888888|EDUCATION|EDUCATION|
29007014333333|102777777|FACULTYX|CUPE3903|
29007015444444|100666666|STAFF|YUSA|
29007005555555|100555555|STAFF|YUSA|
29007016666666|100555555|STAFF|CPM|
#+END_EXAMPLE

That needs to be converted into CSV to be usable, which is what this script does.  It picks apart the fields (user_barcode, cyin, profile, affiliation) and outputs CSV.

It can be run on a specific file, or, if there is no argument, it runs on the most recent one.

The output is written to ~${DASHYUL_DATA}/symphony/user-information-$YYYYMMDD.csv~, and a symlink is made so that ~${DASHYUL_DATA}/symphony/user-information.csv~ is a stable filename that always points to the most recent data.

Uses:

+ ~convert-symphony-user-dump.rb~

Crontab:

#+BEGIN_EXAMPLE
## User information (weekly)
0 9 * * Sat  ${DASHYUL_HOME}/symphony/scripts/process-weekly-user-dump.sh
#+END_EXAMPLE

** ~process-catalogue-dump.sh~

Crontab:

#+BEGIN_EXAMPLE
## Symphony (monthly)
0 11 2 * * ${DASHYUL_HOME}/symphony/scripts/process-catalogue-dump.sh &> /tmp/catalogue-dump.txt; ${DASHYUL_HOME}/symphony/scripts/make-detailed-transactions.sh &> /tmp/detailed-transactions.txt
#+END_EXAMPLE

** ~make-detailed-transactions.sh~

Uses:

+ ~parse-monthly-transactions-logs.rb~ (which requires ~command-codes.rb~ and ~data-codes.rb~)
+ ~make-detailed-transactions-stage-2.R~
+ ~make-detailed-transactions-stage-4.R~
+ ~make-detailed-transactions-stage-5.R~
+ ~make-detailed-transactions-stage-6.R~

Crontab:  goes with ~process-catalogue-dump.sh~ because it needs to run right after it.

** ~process-monthly-transaction-logs.rb~

These transaction logs are generated with a Symphony report, which generates files named ~/sirsilogs/YYYYMM.hist~.  They look like:

#+BEGIN_EXAMPLE
E201603010005510006R ^S01RVFFSIRSI^FEYORK^FcNONE^FWSIRSI^NQ39007053755963^UO29001111111111^^O00072
E201603010008000006R ^S01RVFFSIRSI^FEYORK^FcNONE^FWSIRSI^NQ39007041514092^UO29002222222222^^O00072
#+END_EXAMPLE

The first part is structured ~FYYYYMMDDHHMMSSWWWWT~ and has the transaction date, time and some internal information:

+ F = the transaction format. Here it is "E"
+ YYYY = four-digit year
+ MM = two-digit month, 01 - 12
+ DD = two-digit day of month, 01 - 31
+ HH = two-digit hour, 00 - 23
+ MM = two-digit minute, 00 - 59
+ SS = two-digit second, 00 - 59
+ WWWW = four-digit station number, 0001 - 9999
+ T = transaction type
  + R for requests
  + F for final part of response(or complete response)
  + I intermediate portion(s) of longer responses

The last two letters in ~^S01CV~ or the like is the transaction command.  We only care about these four commands; everything else (such as when a book is added to the collection, or a fine is paid) is ignored.

+ CV = check out ("Charge Item Part B")
+ EV = check in ("Discharge Item)
+ JZ = hold ("Create Hold")
+ RV = renew ("Renew Item")

Then:

+ ^FE = library
+ ^UO = user barcode
+ ^NQ = item barcode

Finally:

+ ^Q = end of record.

The script outputs to STDOUT, sending clean CSV with these fields:

+ date
+ transaction_command
+ library
+ item_barcode
+ user_barcode

TODO:

+ [ ] Document the Symphony report?

** ~extract-catalogue-item-details.rb~

** ~extract-catalogue-title-metadata.rb~

** ~extract-catalogue-isbn-item-number-map.sh~
